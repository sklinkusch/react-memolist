{"version":3,"sources":["components/logo.svg","components/Logo.js","components/Header.js","components/ItemsList.js","components/MemoList.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","src","logo","className","alt","Header","ItemsList","this","props","items","map","item","key","id","text","Component","MemoList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","value","handleSubmit","preventDefault","newItem","Date","now","state","newItems","concat","save","JSON","parse","localStorage","getItem","jsonItems","stringify","setItem","ItemsList_ItemsList","onSubmit","type","name","onChange","length","App","components_Logo","components_Header","components_MemoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mRCUzBC,EAPF,WACX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,WCIhCC,EARA,WACb,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,iCCFeM,0LAEjB,OACER,EAAAC,EAAAC,cAAA,UACGO,KAAKC,MAAMC,MAAMC,IAAI,SAAAC,GAAI,OACxBb,EAAAC,EAAAC,cAAA,MAAIY,IAAKD,EAAKE,IAAKF,EAAKG,gBALKC,cCmDxBC,qBAjDb,SAAAA,EAAYR,GAAO,IAAAS,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAX,KAAAS,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAX,KAAAW,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAf,KAAMC,KAKRe,aAAe,SAAAC,GACbP,EAAKQ,SAAS,CAAEX,KAAMU,EAAME,OAAOC,SAPlBV,EASnBW,aAAe,SAAAJ,GACbA,EAAMK,iBACN,IAAMC,EAAU,CACdjB,GAAIkB,KAAKC,MACTlB,KAAMG,EAAKgB,MAAMnB,MAEnB,GAAwB,KAApBG,EAAKgB,MAAMnB,KAAf,CAGA,IAAMoB,EAAWjB,EAAKgB,MAAMxB,MAAM0B,OAAOL,GACzCb,EAAKQ,SAAS,SAAAQ,GAAK,MAAK,CACtBxB,MAAOyB,EACPpB,KAAM,MAERG,EAAKmB,KAAKF,KArBVjB,EAAKgB,MAAQ,GACbhB,EAAKgB,MAAMnB,KAAO,GAClBG,EAAKgB,MAAMxB,MAAQ4B,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,GAJ/CvB,oEAyBdR,GACH,IAAMgC,EAAYJ,KAAKK,UAAUjC,GACjC8B,aAAaI,QAAQ,QAASF,oCAG9B,OACE3C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAD,CAAWnC,MAAOF,KAAK0B,MAAMxB,QAC7BX,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,QAAM6C,SAAUtC,KAAKqB,cACnB9B,EAAAC,EAAAC,cAAA,SACE8C,KAAK,OACLC,KAAK,OACLlC,GAAG,WACHmC,SAAUzC,KAAKgB,aACfI,MAAOpB,KAAK0B,MAAMnB,OAEpBhB,EAAAC,EAAAC,cAAA,sBAAcO,KAAK0B,MAAMxB,MAAMwC,OAAS,YA3C3BlC,cCgBRmC,0LAZX,OACEpD,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACmD,EAAD,MACArD,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACqD,EAAD,eAPQtC,cCMEuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fded0f8f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nconst Logo = () => {\n  return (\n    <div>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    </div>\n  );\n};\nexport default Logo;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <div>\n      <h3>My React ToDoList</h3>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"../styles/ItemsList.css\";\n\nexport default class ItemsList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ItemsList from \"./ItemsList\";\nimport \"../styles/MemoList.css\";\n\nclass MemoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.state.text = \"\";\n    this.state.items = JSON.parse(localStorage.getItem(\"items\")) || [];\n  }\n  handleChange = event => {\n    this.setState({ text: event.target.value });\n  };\n  handleSubmit = event => {\n    event.preventDefault();\n    const newItem = {\n      id: Date.now(),\n      text: this.state.text\n    };\n    if (this.state.text === \"\") {\n      return;\n    }\n    const newItems = this.state.items.concat(newItem);\n    this.setState(state => ({\n      items: newItems,\n      text: \"\"\n    }));\n    this.save(newItems);\n  };\n  save(items) {\n    const jsonItems = JSON.stringify(items);\n    localStorage.setItem(\"items\", jsonItems);\n  }\n  render() {\n    return (\n      <div>\n        <ItemsList items={this.state.items} />\n        <p>What do you want to add?</p>\n        <form onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"item\"\n            id=\"add-item\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>Add #{this.state.items.length + 1}</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default MemoList;\n","import React, { Component } from \"react\";\nimport Logo from \"./Logo\";\nimport Header from \"./Header\";\nimport MemoList from \"./MemoList\";\nimport \"../styles/App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <Logo />\n          <Header />\n          <MemoList />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}